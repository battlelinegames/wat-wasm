#!/usr/bin/env node

const args = process.argv;
const chalk = require('chalk');
({ watwasm, log_error, log_support } = require('../src/watwasm'));

if (args.length <= 2) {
  console.log(`
    Usage:
    ${chalk.yellow('wat2wasm file.wat')}
    Creates file.wasm given a WebAssembly Text file
  
    ${chalk.yellow('wat2wasm file.wat -o other.wasm')}
    Creates other.wasm WebAssembly file from file.wat.
      The -o flag allows you to specify an output file.
  
    Flags:
    ${chalk.yellow('-o')} is followed by an output file name);

    ${chalk.yellow('-O1')} minimal performance optmization
    ${chalk.yellow('-O2')} moderate performance optmization
    ${chalk.yellow('-O3')} maximum performance optmization

    ${chalk.yellow('-Os')} minimal size optmization
    ${chalk.yellow('-Oz')} maximum size optmization

    ${chalk.yellow('--exceptions')} exception handling (proposal)
    ${chalk.yellow('--mutable-globals')} import/export mutable globals (proposal)
    ${chalk.yellow('--sat-float-to-int')} non-trapping float-to-int conversion (proposal)
    ${chalk.yellow('--sign-extension')} sign-extension operators (proposal)
    ${chalk.yellow('--sign-extension')} sign-extension operators (proposal)
    ${chalk.yellow('--simd')} single instruction multiple data (proposal)
    ${chalk.yellow('--threads')} threads (proposal)
    ${chalk.yellow('--multi-value')} functions may return more than one value (proposal)
    ${chalk.yellow('--tail-call')} tail call optimization (proposal)
    ${chalk.yellow('--bulk-memory')} bulk memory copy and memory move (proposal)
    ${chalk.yellow('--reference-types')} improved interoperablility with host env (proposal)
    ${chalk.yellow('--annotations')} custom annotations (proposal)
    ${chalk.yellow('--gc')} garbage collection (proposal)
    `);
  return;
}

console.log(`
========================================================
  WAT2WASM
========================================================
  `);

let file = args[2];
if (file.endsWith('.wasm')) {
  log_error('wat2wasm passed WASM file!!!');
  console.log(`
    USAGE:

      wat2wasm file.wat
    `);
  return;
}

watwasm(args)

log_support();
